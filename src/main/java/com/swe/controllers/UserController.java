package com.swe.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.swe.entities.Administrator;
import com.swe.entities.NormalUser;
import com.swe.entities.StoreOwner;
import com.swe.entities.User;
import com.swe.repositories.AdminRepository;
import com.swe.repositories.NormalUserRepository;
import com.swe.repositories.StoreOwnerRepository;
import com.swe.repositories.UserRepository;

@Controller
public class UserController {
	
	@Autowired		// This means to get the bean called UserRepository, which is auto-generated by Spring, we will use it to handle the data (CRUD operations)
	private UserRepository userRepo; // I'm not using it here
	
	@Autowired		// This means to get the bean called AdminRepository
	private AdminRepository adminRepo;
	
	@Autowired		// This means to get the bean called AdminRepository
	private StoreOwnerRepository storeOwnerRepo;
	
	@Autowired		// This means to get the bean called AdminRepository
	private NormalUserRepository normalUserRepo;
	
	@GetMapping("/welcome")
	public String getFirstPage(Model model) {
		return "welcome";
	}
	
	@GetMapping("/register")
	public String getRegistirationForm(Model model) {
		model.addAttribute("user", new User());
		return "register";          					// return esm el-view elly 3ayz yt3mllo rendering
    }
	
    @PostMapping("/register")
    public String addUser(Model model, @ModelAttribute User user) {
    	
    	System.out.println(user.getFirstName());
    	System.out.println(user.getId());
    	System.out.println(user.getType());
//    	String userType = user.getType();
    	
    	int id = user.getId();
    	String firstName = user.getFirstName();
    	String lastName = user.getLastName();
    	String email = user.getEmail();
    	String password = user.getPassword();
    	String address = user.getAddress();
		String phoneNumber = user.getPhoneNumber();
		String type = user.getType(); 
		int age = user.getAge();
    	
		int urlID = id;
    	//userRepo.save(user);    // keda 7allet moshklt enno bydeef 2 duplicate records le kol user bygeely fe table User
    	
    	model.addAttribute("user", new User());
    	
    	String redirectPage = "redirect:/nHome";    // Default is Normal User (exceptions will be handled soon isa)
    	
    	if (type.equals("admin")) {    // Alhamdulillah <3 <3 <3 <3 <3 <3 <3 <3 <# <3 <3 <3
    		Administrator admin = new Administrator(id, firstName, lastName, email, password, address, phoneNumber, type, age);
//    		int urlID = id;
    		adminRepo.save(admin);    // save returns the identifier, not the entity.
    		redirectPage = "redirect:/aHome"+"?id="+urlID; // 5ally shakl el-url .../aHome ... wna 3aml ta7t function awl mbtshof el-shakl da btfta7 aHome.html 3la tol ;)
    	}
		else if (type.equals("owner")) {
			StoreOwner owner = new StoreOwner(id, firstName, lastName, email, password, address, phoneNumber, type, age);
			storeOwnerRepo.save(owner);
			redirectPage = "redirect:/oHome"+"?id="+id;
    	}
    	else if (type.equals("normal")) {
    		NormalUser normal = new NormalUser(id, firstName, lastName, email, password, address, phoneNumber, type, age);
    		normalUserRepo.save(normal);
    		redirectPage = "redirect:/nHome"+"?id="+id;
    	}
    	
    	return redirectPage;         // da el-view elly hyzhar b3d ml-user ydos register (bs el-url msh hyt3'ayar w hyb2a "/welcome" aked y3ny :D
        // b3ml redirect 3la tol mn 3'er m-handlha fe html page
    }
	
	@GetMapping("/login")
	public String getLoginForm(Model model) {
		model.addAttribute("user", new User());
		return "login";          					// return esm el-view elly 3ayz yt3mllo rendering (y3ny b2ollo eft7 page login.html)
    }
	
	@PostMapping("/login")
    public String login(Model model, @ModelAttribute User user) {
    	
    	System.out.println(user.getFirstName());
    	System.out.println(user.getEmail());
    	System.out.println(user.getPassword());
    	System.out.println(user.getType());
    	String userType = user.getType();
//    	System.out.println(userType);          // For Debugging
    	
    	//repo.save(user);
    	
    	model.addAttribute("user", new User());
    	
    	String redirectPage = "redirect:/nHome";
    	
    	if (userType.equals("admin"))      // Alhamdulillah <3 <3 <3 <3 <3 <3 <3 <3 <# <3 <3 <3
    		redirectPage = "redirect:/aHome"+"?id="+user.getId(); // 5ally shakl el-url .../aHome ... wna 3aml ta7t function awl mbtshof el-shakl da btfta7 aHome.html 3la tol ;)
    	else if (userType.equals("owner"))
    		redirectPage = "redirect:/oHome"+"?id="+user.getId();
    	else if (userType.equals("normal"))
    		redirectPage = "redirect:/nHome"+"?id="+user.getId();
    	
    	return redirectPage;         // da el-view elly hyzhar b3d ml-user ydos register (bs el-url msh hyt3'ayar w hyb2a "/welcome" aked y3ny :D
        							 // b3ml redirect 3la tol mn 3'er m-handlha fe html page
    }
	
	@GetMapping("/nHome")
	public String getNormalUserHome(Model model) {
//		model.addAttribute("student", new Student());
		return "nHome";          					
    }
	
	@GetMapping("/oHome")
	public String getStoreOwnerHome(Model model) {
//		model.addAttribute("student", new Student());
		return "oHome";          					
    }
	
	@GetMapping("/aHome")
	public String getAdminHome(Model model) {
//		model.addAttribute("student", new Student());
		return "aHome";          					
    }
	
}
